openapi: 3.1.0
info:
  version: '0.0'
  title: Example
  termsOfService: https://example.com/terms/
  contact:
    email: contact@example.com
    url: http://example.com/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://psvehla.github.io/openapi-template/logo.png
  description: "This is an **example** API to demonstrate features of OpenAPI specification\n\
    # Introduction\nThis API definition is intended to to be a good starting point\
    \ for describing your API in \n[OpenAPI format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md).\n\
    \n# OpenAPI Specification\nThe goal of The OpenAPI Specification is to define\
    \ a standard, language-agnostic interface to REST APIs which\nallows both humans\
    \ and computers to discover and understand the capabilities of the service without\
    \ access to source\ncode, documentation, or through network traffic inspection.\
    \ When properly defined via OpenAPI, a consumer can \nunderstand and interact\
    \ with the remote service with a minimal amount of implementation logic. Similar\
    \ to what\ninterfaces have done for lower-level programming, OpenAPI removes the\
    \ guesswork in calling the service.\n"
tags:
- name: Root
  description: Gateway welcome
- name: Echo
  description: Example echo operations
- name: User
  description: Operations about user
- name: Health
  description: Health check of the service
servers:
- url: http://example.com/api/v1
- url: https://example.com/api/v1
paths:
  /:
    get:
      tags:
      - Root
      summary: Root
      description: "Asynchronous function that serves as the root endpoint of the\
        \ application.\n\nReturns:\n    dict: A dictionary containing a welcome message\
        \ for the application's gateway."
      operationId: root__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /users/{username}:
    parameters:
    - name: pretty_print
      in: query
      description: Pretty print response
      schema:
        type: boolean
    get:
      tags:
      - User
      summary: Get user by user name
      description: "Some description of the operation. \nYou can use `markdown` here.\n"
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched
        required: true
        schema:
          type: string
      - name: with_email
        in: query
        description: Filter users without email
        schema:
          type: boolean
      security:
      - main_auth:
        - read:users
      - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
      - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be updated
        required: true
        schema:
          type: string
      security:
      - main_auth:
        - write:users
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /echo:
    post:
      tags:
      - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
      - api_key: []
      - basic_auth: []
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      requestBody:
        content:
          application/json:
            schema:
              type: string
              examples:
              - Hello world!
          application/xml:
            schema:
              type: string
              examples:
              - Hello world!
        description: Echo payload
        required: true
  /health:
    get:
      tags:
      - Health
      summary: Health check of the service
      description: "Allows the caller to check the health of the service. What this\
        \ actually means will vary from service to service. Some may verify that downstream\
        \ services \nare available. Some may merely report that they can respond to\
        \ requests.\n"
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    examples:
                    - healthy
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    examples:
                    - unhealthy
components:
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      examples:
      - john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          examples:
          - John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          examples:
          - John
        lastName:
          description: User last name
          type: string
          minLength: 1
          examples:
          - Smith
        email:
          $ref: '#/components/schemas/Email'
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read users info
            write:users: modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
